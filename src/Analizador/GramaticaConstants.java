/* Generated By:JavaCC: Do not edit this line. GramaticaConstants.java */
package Analizador;


/** 
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
public interface GramaticaConstants {

  /** End of File. */
  int EOF = 0;
  /** RegularExpression Id. */
  int COMENTARIOLINEA = 5;
  /** RegularExpression Id. */
  int COMENTARIOMULTILINEA = 6;
  /** RegularExpression Id. */
  int DIGITO = 7;
  /** RegularExpression Id. */
  int LETRA = 8;
  /** RegularExpression Id. */
  int PCOMA = 9;
  /** RegularExpression Id. */
  int PUNTO = 10;
  /** RegularExpression Id. */
  int COMA = 11;
  /** RegularExpression Id. */
  int PUNTOS = 12;
  /** RegularExpression Id. */
  int PAPERTURA = 13;
  /** RegularExpression Id. */
  int PCIERRE = 14;
  /** RegularExpression Id. */
  int CORAPERTURA = 15;
  /** RegularExpression Id. */
  int CORCIERRE = 16;
  /** RegularExpression Id. */
  int LLAVEAPERTURA = 17;
  /** RegularExpression Id. */
  int LLAVECIERRE = 18;
  /** RegularExpression Id. */
  int GUIONBAJO = 19;
  /** RegularExpression Id. */
  int PRINT = 20;
  /** RegularExpression Id. */
  int PRINTLN = 21;
  /** RegularExpression Id. */
  int SUMA = 22;
  /** RegularExpression Id. */
  int RESTA = 23;
  /** RegularExpression Id. */
  int MULTIPLICACION = 24;
  /** RegularExpression Id. */
  int DIV = 25;
  /** RegularExpression Id. */
  int MOD = 26;
  /** RegularExpression Id. */
  int INCREMENTO = 27;
  /** RegularExpression Id. */
  int DECREMENTO = 28;
  /** RegularExpression Id. */
  int AND = 29;
  /** RegularExpression Id. */
  int OR = 30;
  /** RegularExpression Id. */
  int NOT = 31;
  /** RegularExpression Id. */
  int IGUAL = 32;
  /** RegularExpression Id. */
  int MAYOR = 33;
  /** RegularExpression Id. */
  int MENOR = 34;
  /** RegularExpression Id. */
  int DIFERENTE = 35;
  /** RegularExpression Id. */
  int ASIGNACION = 36;
  /** RegularExpression Id. */
  int ASIGNACIONSUMA = 37;
  /** RegularExpression Id. */
  int ASIGNACIONRESTA = 38;
  /** RegularExpression Id. */
  int ASIGNACIONCORTA = 39;
  /** RegularExpression Id. */
  int BITAND = 40;
  /** RegularExpression Id. */
  int BITOR = 41;
  /** RegularExpression Id. */
  int BITXOR = 42;
  /** RegularExpression Id. */
  int PACKAGE = 43;
  /** RegularExpression Id. */
  int FUNCTION = 44;
  /** RegularExpression Id. */
  int IMPORT = 45;
  /** RegularExpression Id. */
  int STRING = 46;
  /** RegularExpression Id. */
  int INT = 47;
  /** RegularExpression Id. */
  int FLOAT = 48;
  /** RegularExpression Id. */
  int IF = 49;
  /** RegularExpression Id. */
  int ELSE = 50;
  /** RegularExpression Id. */
  int VAR = 51;
  /** RegularExpression Id. */
  int FOR = 52;
  /** RegularExpression Id. */
  int RANGE = 53;
  /** RegularExpression Id. */
  int SWITCH = 54;
  /** RegularExpression Id. */
  int CASE = 55;
  /** RegularExpression Id. */
  int DEFECTO = 56;
  /** RegularExpression Id. */
  int FALLTHROUGH = 57;
  /** RegularExpression Id. */
  int RETURN = 58;
  /** RegularExpression Id. */
  int IDENTIFICADOR = 59;
  /** RegularExpression Id. */
  int INT_VALOR = 60;
  /** RegularExpression Id. */
  int FLOAT_VALOR = 61;
  /** RegularExpression Id. */
  int STRING_VALOR = 62;

  /** Lexical state. */
  int DEFAULT = 0;

  /** Literal token values. */
  String[] tokenImage = {
    "<EOF>",
    "\" \"",
    "\"\\t\"",
    "\"\\r\"",
    "\"\\n\"",
    "<COMENTARIOLINEA>",
    "<COMENTARIOMULTILINEA>",
    "<DIGITO>",
    "<LETRA>",
    "\";\"",
    "\".\"",
    "\",\"",
    "\":\"",
    "\"(\"",
    "\")\"",
    "\"[\"",
    "\"]\"",
    "\"{\"",
    "\"}\"",
    "\"_\"",
    "\"Print\"",
    "\"Println\"",
    "\"+\"",
    "\"-\"",
    "\"*\"",
    "\"/\"",
    "\"%\"",
    "\"++\"",
    "\"--\"",
    "\"&&\"",
    "\"||\"",
    "\"!\"",
    "\"==\"",
    "\">\"",
    "\"<\"",
    "\"!=\"",
    "\"=\"",
    "\"+=\"",
    "\"-=\"",
    "\":=\"",
    "\"&\"",
    "\"|\"",
    "\"^\"",
    "\"package\"",
    "\"func\"",
    "\"import\"",
    "\"string\"",
    "\"int\"",
    "\"float\"",
    "\"if\"",
    "\"else\"",
    "\"var\"",
    "\"for\"",
    "\"range\"",
    "\"switch\"",
    "\"case\"",
    "\"default\"",
    "\"fallthrough\"",
    "\"return\"",
    "<IDENTIFICADOR>",
    "<INT_VALOR>",
    "<FLOAT_VALOR>",
    "<STRING_VALOR>",
  };

}
